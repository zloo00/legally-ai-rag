import pandas as pd
import time
from dotenv import load_dotenv
import os

from legal_chat import LegalChatBot

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# 1. –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
INPUT_FILE = "jurhelp_questions.xlsx"
OUTPUT_FILE = "lawyer_vs_rag.xlsx"

df = pd.read_excel(INPUT_FILE)

# 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ RAG)
chatbot = LegalChatBot(model="gpt-4")

# 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ (–ø–µ—Ä–≤—ã–µ 10 –¥–ª—è —Ç–µ—Å—Ç–∞)
rag_answers = []
sources_list = []

# –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 –≤–æ–ø—Ä–æ—Å–æ–≤
test_df = df.head(10)

for i, row in enumerate(test_df.itertuples(index=False), start=1):
    q = str(getattr(row, "–í–æ–ø—Ä–æ—Å"))
    lawyer_answer = str(getattr(row, "–û—Ç–≤–µ—Ç"))
    
    print(f"[{i}/10] {q[:60]}...")
    
    try:
        # –û—Ç–≤–µ—Ç RAG
        rag_result = chatbot.get_legal_answer(q)
        rag_answer = rag_result["answer"]
        rag_answers.append(rag_answer)
        
        # –ò—Å—Ç–æ—á–Ω–∏–∫–∏
        sources = rag_result.get("sources", [])
        sources_list.append(", ".join(sources) if sources else "")
        
        print(f"  ü§ñ RAG: {rag_answer[:100]}...")
        print(f"  üë®‚Äçüíº –Æ—Ä–∏—Å—Ç: {lawyer_answer[:100]}...")
        if sources:
            print(f"  üìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {sources}")
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        rag_answers.append("–û—à–∏–±–∫–∞")
        sources_list.append("")
    
    print()

# 4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
test_df = test_df.copy()
test_df["–û—Ç–≤–µ—Ç_RAG"] = rag_answers
test_df["–ò—Å—Ç–æ—á–Ω–∏–∫–∏_RAG"] = sources_list

# –ü–µ—Ä–µ–∏–º–µ–Ω—É–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
test_df = test_df.rename(columns={
    "–û—Ç–≤–µ—Ç": "–û—Ç–≤–µ—Ç_–Æ—Ä–∏—Å—Ç–∞",
    "–í–æ–ø—Ä–æ—Å": "–í–æ–ø—Ä–æ—Å",
    "ID": "ID",
    "–î–∞—Ç–∞": "–î–∞—Ç–∞",
    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
    "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
    "–≠–∫—Å–ø–µ—Ä—Ç": "–≠–∫—Å–ø–µ—Ä—Ç"
})

test_df.to_excel(OUTPUT_FILE, index=False)
print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {OUTPUT_FILE}")
print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(test_df)} –≤–æ–ø—Ä–æ—Å–æ–≤")

# 5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
print("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
stats = chatbot.get_system_stats()
print(f"  –í–µ–∫—Ç–æ—Ä–æ–≤ –≤ –∏–Ω–¥–µ–∫—Å–µ: {stats.get('total_vectors', 0)}")
print(f"  –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–∞: {stats.get('index_dimension', 0)}")

# 6. –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞
print("\nüîç –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞:")
successful_rag = sum(1 for ans in rag_answers if ans != "–û—à–∏–±–∫–∞" and "–æ—à–∏–±–∫–∞" not in ans.lower())
print(f"  –£—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ RAG: {successful_rag}/{len(test_df)}")
print(f"  –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {successful_rag/len(test_df)*100:.1f}%") 