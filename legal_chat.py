import os
import openai
from dotenv import load_dotenv
from typing import List, Dict, Any, Optional
from rag_system import EnhancedRAGSystem
import json
from datetime import datetime

load_dotenv()

class LegalChatBot:
    def __init__(self, model: str = "gpt-4"):
        """Initialize the legal chatbot with RAG system"""
        self.openai_client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
        self.model = model
        self.rag_system = EnhancedRAGSystem()
        self.conversation_history: List[Dict[str, str]] = []
        self.max_history_length = 10
        
    def add_message(self, role: str, content: str):
        """Add a message to conversation history"""
        self.conversation_history.append({"role": role, "content": content})
        
        # Keep conversation history within limit
        if len(self.conversation_history) > self.max_history_length * 2:
            self.conversation_history = self.conversation_history[-self.max_history_length * 2:]
    
    def get_legal_answer(self, question: str) -> Dict[str, Any]:
        """Get legal answer using RAG system"""
        try:
            # Use RAG system to get answer
            result = self.rag_system.query(question)
            return result
        except Exception as e:
            print(f"Error in RAG query: {e}")
            return {
                "answer": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
                "sources": [],
                "search_results": []
            }
    
    def get_general_answer(self, question: str) -> str:
        """Get general answer using OpenAI (without RAG)"""
        try:
            # Convert conversation history to proper format
            messages = []
            for msg in self.conversation_history:
                if msg["role"] in ["user", "assistant", "system"]:
                    messages.append({"role": msg["role"], "content": msg["content"]})
            
            messages.append({"role": "user", "content": question})
            
            response = self.openai_client.chat.completions.create(
                model=self.model,
                messages=messages,  # type: ignore
                temperature=0.7,
                max_tokens=1000
            )
            
            answer = response.choices[0].message.content
            return answer if answer else "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç."
            
        except Exception as e:
            print(f"Error getting general answer: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞."
    
    def chat(self, message: str, use_rag: bool = True) -> Dict[str, Any]:
        """Main chat method"""
        # Add user message to history
        self.add_message("user", message)
        
        if use_rag:
            # Use RAG for legal questions
            result = self.get_legal_answer(message)
            answer = result["answer"]
            
            # Add assistant response to history
            self.add_message("assistant", answer)
            
            return {
                "answer": answer,
                "sources": result.get("sources", []),
                "search_results": result.get("search_results", []),
                "context_length": result.get("context_length", 0),
                "results_count": result.get("results_count", 0),
                "mode": "legal_rag"
            }
        else:
            # Use general OpenAI for non-legal questions
            answer = self.get_general_answer(message)
            
            # Add assistant response to history
            self.add_message("assistant", answer)
            
            return {
                "answer": answer,
                "sources": [],
                "search_results": [],
                "mode": "general"
            }
    
    def clear_history(self):
        """Clear conversation history"""
        self.conversation_history = []
        self.rag_system.clear_conversation_history()
    
    def get_history(self) -> List[Dict[str, str]]:
        """Get conversation history"""
        return self.conversation_history
    
    def get_system_stats(self) -> Dict[str, Any]:
        """Get system statistics"""
        return self.rag_system.get_system_stats()

def main():
    """Main chat interface"""
    print("ü§ñ –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç")
    print("=" * 50)
    print("üí° –≠—Ç–æ—Ç –±–æ—Ç –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–æ–º—É –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É")
    print("üìö –ò—Å–ø–æ–ª—å–∑—É–µ—Ç RAG —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö")
    print("üîç –ö–æ–º–∞–Ω–¥—ã: 'quit' - –≤—ã—Ö–æ–¥, 'clear' - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é, 'stats' - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    print("=" * 50)
    
    chatbot = LegalChatBot()
    
    # Show system stats
    stats = chatbot.get_system_stats()
    print(f"üìä –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞! –í–µ–∫—Ç–æ—Ä–æ–≤ –≤ –∏–Ω–¥–µ–∫—Å–µ: {stats.get('total_vectors', 0)}")
    print()
    
    while True:
        try:
            user_input = input("üë§ –í—ã: ").strip()
            
            if user_input.lower() == 'quit':
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            elif user_input.lower() == 'clear':
                chatbot.clear_history()
                print("üßπ –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞!")
                continue
            elif user_input.lower() == 'stats':
                stats = chatbot.get_system_stats()
                print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:")
                print(f"   –í–µ–∫—Ç–æ—Ä–æ–≤ –≤ –∏–Ω–¥–µ–∫—Å–µ: {stats.get('total_vectors', 0)}")
                print(f"   –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {stats.get('index_dimension', 0)}")
                print(f"   –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: {stats.get('conversation_history_length', 0)}")
                continue
            elif user_input.lower() == 'help':
                print("üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
                print("   'quit' - –≤—ã—Ö–æ–¥ –∏–∑ —á–∞—Ç–∞")
                print("   'clear' - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞")
                print("   'stats' - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã")
                print("   'help' - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É")
                continue
            
            if not user_input:
                continue
            
            print("ü§ñ AI: ", end="", flush=True)
            
            # Determine if this is a legal question
            legal_keywords = [
                '–∑–∞–∫–æ–Ω', '–ø—Ä–∞–≤–æ', '—Å—Ç–∞—Ç—å—è', '–∫–æ–¥–µ–∫—Å', '–¥–æ–≥–æ–≤–æ—Ä', '—Å—É–¥', '–∏—Å–∫',
                '–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å', '–æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ', '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å', '–Ω–∞—Å–ª–µ–¥—Å—Ç–≤–æ',
                '–±—Ä–∞–∫', '—Ä–∞–∑–≤–æ–¥', '–∞–ª–∏–º–µ–Ω—Ç—ã', '—Ç—Ä—É–¥–æ–≤–æ–π', '–Ω–∞–ª–æ–≥', '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π',
                '—É–≥–æ–ª–æ–≤–Ω—ã–π', '–≥—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π', '–∫–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—è', '–ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ', '–ø—Ä–∏–∫–∞–∑'
            ]
            
            is_legal_question = any(keyword in user_input.lower() for keyword in legal_keywords)
            
            # Get response
            if is_legal_question:
                result = chatbot.chat(user_input, use_rag=True)
                print(result["answer"])
                
                if result["sources"]:
                    print(f"\nüìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {', '.join(result['sources'])}")
                if result["results_count"] > 0:
                    print(f"üîç –ù–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {result['results_count']}")
            else:
                result = chatbot.chat(user_input, use_rag=False)
                print(result["answer"])
            
            print()
            
        except KeyboardInterrupt:
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main() 