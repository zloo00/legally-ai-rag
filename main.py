from fastapi import FastAPI, HTTPException
from fastapi.encoders import jsonable_encoder
from pydantic import BaseModel
from openai import OpenAI
from dotenv import load_dotenv
import os
from pinecone import Pinecone

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
app = FastAPI()
load_dotenv()

# üîë OpenAI
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# üîó Pinecone
pc = Pinecone(api_key=os.getenv("PINECONE_API_KEY"))
index = pc.Index(os.getenv("PINECONE_INDEX_NAME"))

# üîß –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ OpenAI
def get_embedding(text: str) -> list[float]:
    response = client.embeddings.create(
        input=text,
        model="text-embedding-ada-002"
    )
    return response.data[0].embedding

# üì• –ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞
class QueryRequest(BaseModel):
    query: str
    user_id: str

# üöÄ –≠–Ω–¥–ø–æ–∏–Ω—Ç –ø–æ–∏—Å–∫–∞
@app.post("/search")
async def search_docs(req: QueryRequest):
    try:
        query_embedding = get_embedding(req.query)

        # üîç –ü–æ–∏—Å–∫ –≤ Pinecone —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ user_id
        search_response = index.query(
            vector=query_embedding,
            top_k=5,
            include_metadata=True,
            # filter={"user_id": {"$eq": req.user_id}}
        )

        matches = search_response.get('matches', [])
        if not matches:
            return {"matches": None, "answer": "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É."}

        # üìö –°–±–æ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        retrieved_context = "\n".join([m['metadata'].get('text', '') for m in matches])

        # üß† GPT-4 –∑–∞–ø—Ä–æ—Å
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî AI-—é—Ä–∏—Å—Ç, –ø–æ–º–æ–≥–∞—é—â–∏–π –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã."},
                {"role": "user", "content": f"–í–æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç:\n{retrieved_context}\n\n–í–æ–ø—Ä–æ—Å: {req.query}"}
            ],
            temperature=0.3,
            max_tokens=1000
        )

        return {
            "matches": jsonable_encoder(matches),
            "answer": response.choices[0].message.content
        }

    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
